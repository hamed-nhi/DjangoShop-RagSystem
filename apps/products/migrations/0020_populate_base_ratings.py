# Generated by Django 5.2 on 2025-08-08 21:28

from django.db import migrations

RATING_FEATURE_ID = 20 

BASE_WEIGHT = 50 

def transfer_ratings_data(apps, schema_editor):
    """
    Finds the old rating from ProductFeature, scales it from 100 to 5,
    and saves it in the new fields in the Product model.
    """
    Product = apps.get_model('products', 'Product')
    ProductFeature = apps.get_model('products', 'ProductFeature')

    # Find all product features that are ratings
    rating_features = ProductFeature.objects.filter(feature_id=RATING_FEATURE_ID)

    for rating_feature in rating_features:
        try:
            # Get the product associated with this rating feature
            product_to_update = rating_feature.product
            
            # Get the rating value (e.g., "85") and convert it to a number
            rating_value_100_scale = float(rating_feature.value)
            
            # Scale it from 0-100 to 0-5 by dividing by 20
            scaled_rating_5_scale = rating_value_100_scale / 20.0
            
            # Update the product with the new values
            product_to_update.base_rating = scaled_rating_5_scale
            product_to_update.base_rating_weight = BASE_WEIGHT
            product_to_update.save()
            
            print(f"Updated product '{product_to_update.product_name}' with base rating {scaled_rating_5_scale}")

        except (ValueError, TypeError):
            # This will skip any rating values that aren't valid numbers
            print(f"Could not process rating for product ID {rating_feature.product_id}. Value was '{rating_feature.value}'")



 

class Migration(migrations.Migration):

    dependencies = [
        ("products", "0019_product_base_rating_product_base_rating_weight_and_more"),
    ]

    operations = [
        migrations.RunPython(transfer_ratings_data),
    ]
